{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","event","this","setState","target","name","value","preventDefault","createTodo","id","uuid","completed","className","onSubmit","htmlFor","type","onChange","placeholder","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","class","onClick","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","todo","updatedTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31b905ee.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './NewTodoForm.css'\nimport uuid from 'uuid/v4'\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { task: \"\" }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    // Computed Property\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false })\n    this.setState({\n      task: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\"></label>\n        <input \n        id=\"task\"\n        name=\"task\"\n        value={this.state.task}\n        type=\"text\" \n        onChange={this.handleChange}\n        placeholder=\"Add Todo\" />\n        <button>Add Todo</button>\n      </form>\n    )\n  }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react'\nimport './Todo.css'\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    }\n    this.handleRemove = this.handleRemove.bind(this); \n    this.toggleForm = this.toggleForm.bind(this);  \n    this.handleChange = this.handleChange.bind(this);  \n    this.handleUpdate = this.handleUpdate.bind(this);  \n    this.handleToggle = this.handleToggle.bind(this);  \n  }\n\n  handleRemove() {\n    this.props.removeTodo(this.props.id)\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing })\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleUpdate(event) {\n    event.preventDefault();\n    // Pass new task data up to the parent\n    this.props.updateTodo(this.props.id, this.state.task)\n    this.setState({ isEditing: false })\n  }\n\n  handleToggle() {\n    this.props.toggleTodo(this.props.id)\n  }\n\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <div class=\"Todo\">\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n            <label>Edit</label>\n            <input\n            name=\"task\" \n            type=\"text\" \n            value={this.state.task}\n            onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </div>\n      )\n    } else {\n      result = (\n      <div class=\"Todo\">\n        <li onClick={this.handleToggle} className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}>\n          {this.props.task} \n        </li>\n        <div className=\"Todo-buttons\">\n          <button onClick={this.toggleForm}>\n            <i class=\"fas fa-edit\"></i>\n          </button>\n          <button onClick={this.handleRemove}>\n            <i class=\"fas fa-trash-alt\"></i>\n          </button>\n        </div>\n      </div>\n      )\n    }\n    return result\n  }\n}\n\nexport default Todo;","import React, { Component } from 'react'\nimport NewTodoForm from './NewTodoForm'\nimport Todo from './Todo'\nimport './TodoList.css'\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      todos: []\n    }\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n  }\n\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    })\n  }\n\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  }\n\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return {...todo, task: updatedTask}\n      } else {\n        return todo;\n      }\n    });\n    this.setState({ todos: updatedTodos })\n  }\n\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed }\n      } else {\n        return todo\n      }\n    });\n    this.setState({ todos: updatedTodos })\n  }\n\n\n  render() {\n    const todos = this.state.todos.map(todo => (\n      <Todo \n      key={todo.id} \n      id={todo.id}\n      task={todo.task} \n      completed={todo.completed}\n      removeTodo={this.remove} \n      updateTodo={this.update}\n      toggleTodo={this.toggleCompletion}\n      />\n    ))\n    return (\n      <div className=\"TodoList\">\n      <h1>\n        Todo List <span>A Simple React Todo List</span>\n      </h1>\n        <ul> {todos} </ul>\n        <NewTodoForm createTodo={this.create}/>\n      </div>\n    )\n  }\n}\n\nexport default TodoList;","import React, { Component } from 'react'\nimport TodoList from './TodoList'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <TodoList />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}